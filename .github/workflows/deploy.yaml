name: Automatic deployment to Hostinger

on:
  push:
    branches:
      - main

env:
  PROJECT_NAME: "biblios-app"
  PROJECT_DOMAIN: "green-pony-128403.hostingersite.com"
  PHP_VERSION: "8.2"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up PHP & Composer
        uses: shivammathur/setup-php@v2
        with:
            php-version: ${{ env.PHP_VERSION }}
            extensions: mbstring, intl, pdo, pdo_mysql, ctype, iconv, xml, zip
            tools: composer

      - name: Update Composer to v2
        run: |
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          php composer-setup.php --install-dir=/usr/local/bin --filename=composer --version=2.8.6
          php -r "unlink('composer-setup.php');"
          composer --version

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.HOSTINGER_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

      - name: Add Hostinger to known hosts
        run: |
          ssh-keyscan -p ${{ secrets.HOSTINGER_SSH_PORT }} ${{ secrets.HOSTINGER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy Symfony public directory
        run: |
          FRONT_END_REPO="/home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/public_html/"
          
          if [ -d "${{ env.PROJECT_NAME }}/public" ]; then
            echo "Déploiement du dossier public vers $FRONT_END_REPO"
            rsync -avz --delete -e "ssh -p ${{ secrets.HOSTINGER_SSH_PORT }}" \
              ${{ env.PROJECT_NAME }}/public/ \
              ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }}:$FRONT_END_REPO
          else
            echo "Erreur: Le dossier public n'existe pas dans ${{ env.PROJECT_NAME }}/"
            exit 1
          fi
          
      - name: Deploy Symfony backend files
        run: |
          BACK_END_REPO="/home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/symfony-app/"
          
          echo "Création du répertoire backend: $BACK_END_REPO"
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT }} \
            ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} \
            "mkdir -p $BACK_END_REPO"
          
          echo "Déploiement des fichiers backend vers $BACK_END_REPO"
          cd ${{ env.PROJECT_NAME }}
          rsync -avz --delete \
            --exclude='public/' \
            --exclude='tests/' \
            --exclude='*.env.test' \
            --exclude='*.env.dev' \
            --exclude='compose*' \
            -e "ssh -p ${{ secrets.HOSTINGER_SSH_PORT }}" \
            ./ ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }}:$BACK_END_REPO


      - name: Build Symfony app locally
        run: |
          cd ${{ env.PROJECT_NAME }}
          composer install --no-dev --optimize-autoloader --no-scripts

      - name: Inject DATABASE_URL on server
        run: |
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT }} ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} "
            echo 'DATABASE_URL=\"${{ secrets.DATABASE_URL }}\"' >> /home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/symfony-app/.env
          "

      - name: Check remote .env file
        run: |
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT }} ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} "
            cat /home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/symfony-app/.env
          "

      - name: Debug - Test Symfony installation
        run: |
          echo "Test de l'installation Symfony..."
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT }} \
            ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} \
            'cd /home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/symfony-app && \
            php --version && \
            php bin/console --version --env=prod'

      - name: Run database create on Hostinger
        run: |
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT }} \
            ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} \
            'cd /home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/symfony-app && \
            php bin/console doctrine:database:create --if-not-exists --env=prod --no-interaction -v'


      - name: Run migrations and Symfony commands
        run: |
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT }} ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} "
            cd /home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/symfony-app && 
            php bin/console doctrine:migrations:migrate --no-interaction --env=prod &&
            php bin/console assets:install ../public_html --env=prod &&
            php bin/console cache:clear --no-warmup --env=prod &&
            php bin/console cache:warmup --env=prod
          "

      - name: Set permissions
        run: |
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT }} \
            ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} "
              chmod -R 755 /home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/public_html/ &&
              chmod -R 777 /home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/symfony-app/var/"

      - name: Deployment completed
        run: |
          echo "Déploiement terminé avec succès!"
          echo "Site accessible à: https://${{ env.PROJECT_DOMAIN }}"