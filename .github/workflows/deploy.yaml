name: Deploy to Hostinger

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_DOMAIN: green-pony-128403.hostingersite.com

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json, zip
          tools: composer:v2

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run tests
        run: php bin/phpunit

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.HOSTINGER_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.HOSTINGER_SSH_PORT }} ${{ secrets.HOSTINGER_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT }} \
            ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} \
            'echo "SSH connection successful"'

      - name: Prepare production environment
        run: |
          echo "=== Configuration pour la production ==="
          # Créer un .env optimisé pour la production
          cat > .env.prod << 'EOF'
          APP_ENV=prod
          APP_DEBUG=0
          DATABASE_URL="${{ secrets.DATABASE_URL }}"
          MESSENGER_TRANSPORT_DSN=doctrine://default?auto_setup=0
          EOF
          
          # Remplacer le .env par la version production
          cp .env.prod .env
          
          echo "=== Installation des dépendances pour la production ==="
          composer install --no-dev --optimize-autoloader --no-interaction
          composer dump-autoload --optimize --no-dev

      - name: Build complete application
        run: |
          echo "=== Préparation des fichiers pour production ==="
          # Nettoyer les fichiers de développement
          rm -rf .git .github node_modules tests *.md .env.prod
          
          # Créer les dossiers nécessaires
          mkdir -p var/cache var/log
          chmod 755 var/cache var/log
          
          echo "=== Création de l'archive de déploiement ==="
          tar -czf symfony-deploy.tar.gz \
            --exclude='var/cache/*' \
            --exclude='var/log/*' \
            .

      - name: Deploy to Hostinger
        run: |
          echo "=== Upload de l'application complète ==="
          scp -P ${{ secrets.HOSTINGER_SSH_PORT }} \
            symfony-deploy.tar.gz \
            ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }}:/home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/
          
          echo "=== Déploiement sur le serveur ==="
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT }} \
            ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} \
            'cd /home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/ && \
            echo "Sauvegarde de l ancienne version..." && \
            rm -rf symfony-app-backup && \
            mv symfony-app symfony-app-backup 2>/dev/null || true && \
            echo "Extraction de la nouvelle version..." && \
            mkdir -p symfony-app && \
            cd symfony-app && \
            tar -xzf ../symfony-deploy.tar.gz && \
            chmod +x bin/console && \
            chmod -R 755 var/ && \
            rm ../symfony-deploy.tar.gz && \
            echo "Déploiement terminé !"'

      - name: Setup database and cache
        run: |
          echo "=== Configuration de la base de données ==="
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT }} \
            ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} \
            'cd /home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/symfony-app && \
            echo "Test de la connexion à la base de données..." && \
            php bin/console doctrine:database:create --if-not-exists --env=prod --no-interaction && \
            echo "Exécution des migrations..." && \
            php bin/console doctrine:migrations:migrate --env=prod --no-interaction && \
            echo "Nettoyage du cache..." && \
            php bin/console cache:clear --env=prod --no-interaction && \
            echo "Réchauffement du cache..." && \
            php bin/console cache:warmup --env=prod --no-interaction'

      - name: Test deployment
        run: |
          echo "=== Test de l'autoload ==="
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT }} \
            ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} \
            'cd /home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/symfony-app && \
            php -r "require \"vendor/autoload.php\"; echo \"✅ Autoload fonctionne!\\n\";"'
          
          echo "=== Test de Symfony console ==="
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT }} \
            ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} \
            'cd /home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/symfony-app && \
            php bin/console --version --env=prod --no-interaction'
          
          echo "=== Vérification de la structure ==="
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT }} \
            ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} \
            'cd /home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/symfony-app && \
            ls -la && \
            echo "=== Contenu public/ ===" && \
            ls -la public/ && \
            echo "=== Test fichier index.php ===" && \
            head -5 public/index.php'

      - name: Setup web server configuration
        run: |
          echo "=== Configuration du serveur web ==="
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT }} \
            ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} \
            'cd /home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/ && \
            echo "Création du lien symbolique vers public/" && \
            rm -f public_html && \
            ln -sf symfony-app/public public_html && \
            echo "Configuration terminée. Application accessible sur https://${{ env.PROJECT_DOMAIN }}"'

      - name: Final verification
        run: |
          echo "=== Vérification finale ==="
          echo "✅ Application déployée sur : https://${{ env.PROJECT_DOMAIN }}"
          echo "✅ Répertoire applicatif : /home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/symfony-app/"
          echo "✅ Répertoire web : /home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/public_html -> symfony-app/public"
          
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT }} \
            ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} \
            'cd /home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/ && \
            echo "Structure finale:" && \
            ls -la && \
            echo "Lien symbolique public_html:" && \
            ls -la public_html'