name: Automatic deployment to Hostinger

on:
  push:
    branches:
      - main

env:
  PROJECT_NAME: "biblios-app"
  PROJECT_DOMAIN: "green-pony-128403.hostingersite.com"
  PHP_VERSION: "8.2"
  DATABASE_URL: ${{ secrets.DATABASE_URL }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP & Composer
        uses: shivammathur/setup-php@v2
        with:
            php-version: ${{ env.PHP_VERSION }}
            extensions: mbstring, intl, pdo, pdo_mysql, ctype, iconv, xml, zip
            tools: composer:v2.8.6
      
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.HOSTINGER_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

      - name: Add Hostinger to known hosts
        run: |
          ssh-keyscan -p ${{ secrets.HOSTINGER_SSH_PORT }} ${{ secrets.HOSTINGER_HOST }} >> ~/.ssh/known_hosts

      - name: Verify Composer and PHP versions
        run: |
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT }} ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} "
            php -v &&
            \$HOME/bin/composer -V
          "

      - name: Deploy entire ${{ env.PROJECT_NAME }} directory
        run: |
          REMOTE_DIR="/home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/${{ env.PROJECT_NAME }}/"

          echo "Cr√©ation du r√©pertoire distant : $REMOTE_DIR"
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT }} \
            ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} \
            "mkdir -p $REMOTE_DIR"

          echo "D√©ploiement complet du projet Symfony vers $REMOTE_DIR"
          rsync -avz --delete -e "ssh -p ${{ secrets.HOSTINGER_SSH_PORT }}" \
            ${{ env.PROJECT_NAME }}/ \
            ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }}:$REMOTE_DIR

      - name: Create public_html symlink on server
        run: |
          echo "Cr√©ation du lien symbolique entre le dossier ${{ env.PROJECT_NAME }}/public et /public_html"
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT }} ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} "
            rm -rf /home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/public_html &&
            ln -s /home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/${{ env.PROJECT_NAME }}/public /home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/public_html
          "
  
      - name: Install Composer dependencies on server
        run: |
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT }} ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} << 'EOF'
            cd /home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/${{ env.PROJECT_NAME }} || exit 1
            source ~/.bashrc
            rm -rf vendor/
            composer install --no-dev --optimize-autoloader --no-scripts
          EOF

      - name: Inject DATABASE_URL on server
        run: |
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT }} ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} "
            echo 'DATABASE_URL=\"${{ secrets.DATABASE_URL }}\"' >> /home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/${{ env.PROJECT_NAME }}/.env
          "

      - name: Test the DB connection using the Github Actions variable DATABASE_URL
        run: |
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT }} ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} "
            DATABASE_URL='${{ secrets.DATABASE_URL }}' php -r '
              \$url = getenv(\"DATABASE_URL\");
              if (!\$url) {
                echo \"DATABASE_URL not set\\n\";
                exit(1);
              }
              try {
                \$params = parse_url(\$url);
                if (!\$params) throw new Exception(\"Invalid DATABASE_URL\");
                \$pdo = new PDO(\"mysql:host=\".\$params[\"host\"].\";port=\".\$params[\"port\"].\";dbname=\".ltrim(\$params[\"path\"], \"/\"), \$params[\"user\"], \$params[\"pass\"] );
                echo \"DB connection successful\\n\";
                exit(0);
              } catch (Exception \$e) {
                echo \"DB connection failed: \".\$e->getMessage().\"\\n\";
                exit(1);
              }
            '
          "

      - name: Install importmap assets on server
        run: |
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT }} ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} "
            cd /home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/${{ env.PROJECT_NAME }} &&
            php bin/console importmap:install --no-interaction
            php bin/console importmap:require bootstrap
          "

      - name: Add bootstrap import to app.js on server
        run: |
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT }} ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} "
            cd /home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/${{ env.PROJECT_NAME }}/assets &&
            grep -q 'window.bootstrap' app.js || sed -i '1i import * as bootstrap from '\''bootstrap'\'';\nwindow.bootstrap = bootstrap;' app.js
          "

      - name: Compile assets with Asset Map
        run: |
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT }} ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} "
            cd /home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/${{ env.PROJECT_NAME }} &&
            php bin/console asset-map:compile --env=prod
          " 

      - name: Create or update .htaccess in public directory
        run: |
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT }} ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} << 'EOF'
            HTACCESS_FILE="/home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/${{ env.PROJECT_NAME }}/public/.htaccess"
            BLOCK='<IfModule mod_rewrite.c>
            RewriteEngine On
            RewriteCond %{REQUEST_FILENAME} !-f
            RewriteRule ^ index.php [QSA,L]
            </IfModule>'

            if [ -f "$HTACCESS_FILE" ]; then
              if ! grep -q 'RewriteEngine On' "$HTACCESS_FILE"; then
                (echo "$BLOCK"; cat "$HTACCESS_FILE") > "$HTACCESS_FILE.tmp" && mv "$HTACCESS_FILE.tmp" "$HTACCESS_FILE"
              fi
            else
              echo "$BLOCK" > "$HTACCESS_FILE"
            fi
          EOF

      - name: Run database create on Hostinger
        run: |
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT }} ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} << 'EOF'
            echo "--- AJOUT PATH ---"
            source ~/.bashrc
            echo "Contenu de ~/.bashrc :"
            cat ~/.bashrc
            echo "üìç D√©but SSH script"
            cd /home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/${{ env.PROJECT_NAME }} || { echo "‚ùå Dossier non trouv√©" && exit 1; }
            echo "--- Version de PHP ---"
            which php
            php -v || echo "‚ùå PHP ne fonctionne pas"
            echo "--- Test Symfony ---"
            php -d display_errors=1 bin/console about || echo "‚ùå Symfony console KO"
            echo "--- Clear Cache ---"
            php -d display_errors=1 bin/console cache:clear -vv || echo "‚ùå Cache clear KO"
            echo "--- Cr√©ation DB ---"
            php -d display_errors=1 bin/console doctrine:database:create --env=prod --if-not-exists -vvv || echo "‚ùå DB create KO"
            echo "‚úÖ Fin SSH script"
          EOF
          
      - name: Run migrations and Symfony commands
        run: |
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT }} ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} "
            cd /home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/${{ env.PROJECT_NAME }} &&
            php bin/console doctrine:migrations:migrate --no-interaction --env=prod &&
            php bin/console assets:install &&
            php bin/console cache:clear --no-warmup --env=prod &&
            php bin/console cache:warmup --env=prod
          "

      - name: Set permissions
        run: |
          ssh -p ${{ secrets.HOSTINGER_SSH_PORT }} \
            ${{ secrets.HOSTINGER_USERNAME }}@${{ secrets.HOSTINGER_HOST }} "
              chmod -R 755 /home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/public_html/ &&
              chmod -R 777 /home/${{ secrets.HOSTINGER_USERNAME }}/domains/${{ env.PROJECT_DOMAIN }}/${{ env.PROJECT_NAME }}/var/"
